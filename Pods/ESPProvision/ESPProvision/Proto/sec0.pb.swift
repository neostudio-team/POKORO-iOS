// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sec0.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A message must be of type Cmd or Resp 
enum Sec0MsgType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case s0SessionCommand // = 0
  case s0SessionResponse // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .s0SessionCommand
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .s0SessionCommand
    case 1: self = .s0SessionResponse
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .s0SessionCommand: return 0
    case .s0SessionResponse: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sec0MsgType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Sec0MsgType] = [
    .s0SessionCommand,
    .s0SessionResponse,
  ]
}

#endif  // swift(>=4.2)

/// Data structure of Session command/request packet 
struct S0SessionCmd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Data structure of Session response packet 
struct S0SessionResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Status = .success

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Payload structure of session data 
struct Sec0Payload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///!< Type of message 
  var msg: Sec0MsgType = .s0SessionCommand

  var payload: Sec0Payload.OneOf_Payload? = nil

  ///!< Payload data interpreted as Cmd 
  var sc: S0SessionCmd {
    get {
      if case .sc(let v)? = payload {return v}
      return S0SessionCmd()
    }
    set {payload = .sc(newValue)}
  }

  ///!< Payload data interpreted as Resp 
  var sr: S0SessionResp {
    get {
      if case .sr(let v)? = payload {return v}
      return S0SessionResp()
    }
    set {payload = .sr(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable {
    ///!< Payload data interpreted as Cmd 
    case sc(S0SessionCmd)
    ///!< Payload data interpreted as Resp 
    case sr(S0SessionResp)

  #if !swift(>=4.1)
    static func ==(lhs: Sec0Payload.OneOf_Payload, rhs: Sec0Payload.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.sc, .sc): return {
        guard case .sc(let l) = lhs, case .sc(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sr, .sr): return {
        guard case .sr(let l) = lhs, case .sr(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Sec0MsgType: @unchecked Sendable {}
extension S0SessionCmd: @unchecked Sendable {}
extension S0SessionResp: @unchecked Sendable {}
extension Sec0Payload: @unchecked Sendable {}
extension Sec0Payload.OneOf_Payload: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Sec0MsgType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "S0_Session_Command"),
    1: .same(proto: "S0_Session_Response"),
  ]
}

extension S0SessionCmd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "S0SessionCmd"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: S0SessionCmd, rhs: S0SessionCmd) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension S0SessionResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "S0SessionResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .success {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: S0SessionResp, rhs: S0SessionResp) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sec0Payload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Sec0Payload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "msg"),
    20: .same(proto: "sc"),
    21: .same(proto: "sr"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.msg) }()
      case 20: try {
        var v: S0SessionCmd?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .sc(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .sc(v)
        }
      }()
      case 21: try {
        var v: S0SessionResp?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .sr(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .sr(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.msg != .s0SessionCommand {
      try visitor.visitSingularEnumField(value: self.msg, fieldNumber: 1)
    }
    switch self.payload {
    case .sc?: try {
      guard case .sc(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    }()
    case .sr?: try {
      guard case .sr(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sec0Payload, rhs: Sec0Payload) -> Bool {
    if lhs.msg != rhs.msg {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
