// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: network_ctrl.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum NetworkCtrlMsgType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case typeCtrlReserved // = 0
  case typeCmdCtrlWifiReset // = 1
  case typeRespCtrlWifiReset // = 2
  case typeCmdCtrlWifiReprov // = 3
  case typeRespCtrlWifiReprov // = 4
  case typeCmdCtrlThreadReset // = 5
  case typeRespCtrlThreadReset // = 6
  case typeCmdCtrlThreadReprov // = 7
  case typeRespCtrlThreadReprov // = 8
  case UNRECOGNIZED(Int)

  init() {
    self = .typeCtrlReserved
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .typeCtrlReserved
    case 1: self = .typeCmdCtrlWifiReset
    case 2: self = .typeRespCtrlWifiReset
    case 3: self = .typeCmdCtrlWifiReprov
    case 4: self = .typeRespCtrlWifiReprov
    case 5: self = .typeCmdCtrlThreadReset
    case 6: self = .typeRespCtrlThreadReset
    case 7: self = .typeCmdCtrlThreadReprov
    case 8: self = .typeRespCtrlThreadReprov
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .typeCtrlReserved: return 0
    case .typeCmdCtrlWifiReset: return 1
    case .typeRespCtrlWifiReset: return 2
    case .typeCmdCtrlWifiReprov: return 3
    case .typeRespCtrlWifiReprov: return 4
    case .typeCmdCtrlThreadReset: return 5
    case .typeRespCtrlThreadReset: return 6
    case .typeCmdCtrlThreadReprov: return 7
    case .typeRespCtrlThreadReprov: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension NetworkCtrlMsgType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [NetworkCtrlMsgType] = [
    .typeCtrlReserved,
    .typeCmdCtrlWifiReset,
    .typeRespCtrlWifiReset,
    .typeCmdCtrlWifiReprov,
    .typeRespCtrlWifiReprov,
    .typeCmdCtrlThreadReset,
    .typeRespCtrlThreadReset,
    .typeCmdCtrlThreadReprov,
    .typeRespCtrlThreadReprov,
  ]
}

#endif  // swift(>=4.2)

struct CmdCtrlWifiReset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RespCtrlWifiReset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CmdCtrlWifiReprov {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RespCtrlWifiReprov {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CmdCtrlThreadReset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RespCtrlThreadReset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CmdCtrlThreadReprov {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RespCtrlThreadReprov {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct NetworkCtrlPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var msg: NetworkCtrlMsgType = .typeCtrlReserved

  var status: Status = .success

  var payload: NetworkCtrlPayload.OneOf_Payload? = nil

  var cmdCtrlWifiReset: CmdCtrlWifiReset {
    get {
      if case .cmdCtrlWifiReset(let v)? = payload {return v}
      return CmdCtrlWifiReset()
    }
    set {payload = .cmdCtrlWifiReset(newValue)}
  }

  var respCtrlWifiReset: RespCtrlWifiReset {
    get {
      if case .respCtrlWifiReset(let v)? = payload {return v}
      return RespCtrlWifiReset()
    }
    set {payload = .respCtrlWifiReset(newValue)}
  }

  var cmdCtrlWifiReprov: CmdCtrlWifiReprov {
    get {
      if case .cmdCtrlWifiReprov(let v)? = payload {return v}
      return CmdCtrlWifiReprov()
    }
    set {payload = .cmdCtrlWifiReprov(newValue)}
  }

  var respCtrlWifiReprov: RespCtrlWifiReprov {
    get {
      if case .respCtrlWifiReprov(let v)? = payload {return v}
      return RespCtrlWifiReprov()
    }
    set {payload = .respCtrlWifiReprov(newValue)}
  }

  var cmdCtrlThreadReset: CmdCtrlThreadReset {
    get {
      if case .cmdCtrlThreadReset(let v)? = payload {return v}
      return CmdCtrlThreadReset()
    }
    set {payload = .cmdCtrlThreadReset(newValue)}
  }

  var respCtrlThreadReset: RespCtrlThreadReset {
    get {
      if case .respCtrlThreadReset(let v)? = payload {return v}
      return RespCtrlThreadReset()
    }
    set {payload = .respCtrlThreadReset(newValue)}
  }

  var cmdCtrlThreadReprov: CmdCtrlThreadReprov {
    get {
      if case .cmdCtrlThreadReprov(let v)? = payload {return v}
      return CmdCtrlThreadReprov()
    }
    set {payload = .cmdCtrlThreadReprov(newValue)}
  }

  var respCtrlThreadReprov: RespCtrlThreadReprov {
    get {
      if case .respCtrlThreadReprov(let v)? = payload {return v}
      return RespCtrlThreadReprov()
    }
    set {payload = .respCtrlThreadReprov(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable {
    case cmdCtrlWifiReset(CmdCtrlWifiReset)
    case respCtrlWifiReset(RespCtrlWifiReset)
    case cmdCtrlWifiReprov(CmdCtrlWifiReprov)
    case respCtrlWifiReprov(RespCtrlWifiReprov)
    case cmdCtrlThreadReset(CmdCtrlThreadReset)
    case respCtrlThreadReset(RespCtrlThreadReset)
    case cmdCtrlThreadReprov(CmdCtrlThreadReprov)
    case respCtrlThreadReprov(RespCtrlThreadReprov)

  #if !swift(>=4.1)
    static func ==(lhs: NetworkCtrlPayload.OneOf_Payload, rhs: NetworkCtrlPayload.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.cmdCtrlWifiReset, .cmdCtrlWifiReset): return {
        guard case .cmdCtrlWifiReset(let l) = lhs, case .cmdCtrlWifiReset(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.respCtrlWifiReset, .respCtrlWifiReset): return {
        guard case .respCtrlWifiReset(let l) = lhs, case .respCtrlWifiReset(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.cmdCtrlWifiReprov, .cmdCtrlWifiReprov): return {
        guard case .cmdCtrlWifiReprov(let l) = lhs, case .cmdCtrlWifiReprov(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.respCtrlWifiReprov, .respCtrlWifiReprov): return {
        guard case .respCtrlWifiReprov(let l) = lhs, case .respCtrlWifiReprov(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.cmdCtrlThreadReset, .cmdCtrlThreadReset): return {
        guard case .cmdCtrlThreadReset(let l) = lhs, case .cmdCtrlThreadReset(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.respCtrlThreadReset, .respCtrlThreadReset): return {
        guard case .respCtrlThreadReset(let l) = lhs, case .respCtrlThreadReset(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.cmdCtrlThreadReprov, .cmdCtrlThreadReprov): return {
        guard case .cmdCtrlThreadReprov(let l) = lhs, case .cmdCtrlThreadReprov(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.respCtrlThreadReprov, .respCtrlThreadReprov): return {
        guard case .respCtrlThreadReprov(let l) = lhs, case .respCtrlThreadReprov(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension NetworkCtrlMsgType: @unchecked Sendable {}
extension CmdCtrlWifiReset: @unchecked Sendable {}
extension RespCtrlWifiReset: @unchecked Sendable {}
extension CmdCtrlWifiReprov: @unchecked Sendable {}
extension RespCtrlWifiReprov: @unchecked Sendable {}
extension CmdCtrlThreadReset: @unchecked Sendable {}
extension RespCtrlThreadReset: @unchecked Sendable {}
extension CmdCtrlThreadReprov: @unchecked Sendable {}
extension RespCtrlThreadReprov: @unchecked Sendable {}
extension NetworkCtrlPayload: @unchecked Sendable {}
extension NetworkCtrlPayload.OneOf_Payload: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension NetworkCtrlMsgType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TypeCtrlReserved"),
    1: .same(proto: "TypeCmdCtrlWifiReset"),
    2: .same(proto: "TypeRespCtrlWifiReset"),
    3: .same(proto: "TypeCmdCtrlWifiReprov"),
    4: .same(proto: "TypeRespCtrlWifiReprov"),
    5: .same(proto: "TypeCmdCtrlThreadReset"),
    6: .same(proto: "TypeRespCtrlThreadReset"),
    7: .same(proto: "TypeCmdCtrlThreadReprov"),
    8: .same(proto: "TypeRespCtrlThreadReprov"),
  ]
}

extension CmdCtrlWifiReset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CmdCtrlWifiReset"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CmdCtrlWifiReset, rhs: CmdCtrlWifiReset) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RespCtrlWifiReset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RespCtrlWifiReset"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RespCtrlWifiReset, rhs: RespCtrlWifiReset) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CmdCtrlWifiReprov: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CmdCtrlWifiReprov"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CmdCtrlWifiReprov, rhs: CmdCtrlWifiReprov) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RespCtrlWifiReprov: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RespCtrlWifiReprov"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RespCtrlWifiReprov, rhs: RespCtrlWifiReprov) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CmdCtrlThreadReset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CmdCtrlThreadReset"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CmdCtrlThreadReset, rhs: CmdCtrlThreadReset) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RespCtrlThreadReset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RespCtrlThreadReset"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RespCtrlThreadReset, rhs: RespCtrlThreadReset) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CmdCtrlThreadReprov: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CmdCtrlThreadReprov"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CmdCtrlThreadReprov, rhs: CmdCtrlThreadReprov) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RespCtrlThreadReprov: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RespCtrlThreadReprov"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RespCtrlThreadReprov, rhs: RespCtrlThreadReprov) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension NetworkCtrlPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NetworkCtrlPayload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "msg"),
    2: .same(proto: "status"),
    11: .standard(proto: "cmd_ctrl_wifi_reset"),
    12: .standard(proto: "resp_ctrl_wifi_reset"),
    13: .standard(proto: "cmd_ctrl_wifi_reprov"),
    14: .standard(proto: "resp_ctrl_wifi_reprov"),
    15: .standard(proto: "cmd_ctrl_thread_reset"),
    16: .standard(proto: "resp_ctrl_thread_reset"),
    17: .standard(proto: "cmd_ctrl_thread_reprov"),
    18: .standard(proto: "resp_ctrl_thread_reprov"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.msg) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 11: try {
        var v: CmdCtrlWifiReset?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .cmdCtrlWifiReset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .cmdCtrlWifiReset(v)
        }
      }()
      case 12: try {
        var v: RespCtrlWifiReset?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .respCtrlWifiReset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .respCtrlWifiReset(v)
        }
      }()
      case 13: try {
        var v: CmdCtrlWifiReprov?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .cmdCtrlWifiReprov(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .cmdCtrlWifiReprov(v)
        }
      }()
      case 14: try {
        var v: RespCtrlWifiReprov?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .respCtrlWifiReprov(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .respCtrlWifiReprov(v)
        }
      }()
      case 15: try {
        var v: CmdCtrlThreadReset?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .cmdCtrlThreadReset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .cmdCtrlThreadReset(v)
        }
      }()
      case 16: try {
        var v: RespCtrlThreadReset?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .respCtrlThreadReset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .respCtrlThreadReset(v)
        }
      }()
      case 17: try {
        var v: CmdCtrlThreadReprov?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .cmdCtrlThreadReprov(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .cmdCtrlThreadReprov(v)
        }
      }()
      case 18: try {
        var v: RespCtrlThreadReprov?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .respCtrlThreadReprov(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .respCtrlThreadReprov(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.msg != .typeCtrlReserved {
      try visitor.visitSingularEnumField(value: self.msg, fieldNumber: 1)
    }
    if self.status != .success {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    switch self.payload {
    case .cmdCtrlWifiReset?: try {
      guard case .cmdCtrlWifiReset(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .respCtrlWifiReset?: try {
      guard case .respCtrlWifiReset(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .cmdCtrlWifiReprov?: try {
      guard case .cmdCtrlWifiReprov(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .respCtrlWifiReprov?: try {
      guard case .respCtrlWifiReprov(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .cmdCtrlThreadReset?: try {
      guard case .cmdCtrlThreadReset(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .respCtrlThreadReset?: try {
      guard case .respCtrlThreadReset(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .cmdCtrlThreadReprov?: try {
      guard case .cmdCtrlThreadReprov(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case .respCtrlThreadReprov?: try {
      guard case .respCtrlThreadReprov(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: NetworkCtrlPayload, rhs: NetworkCtrlPayload) -> Bool {
    if lhs.msg != rhs.msg {return false}
    if lhs.status != rhs.status {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
