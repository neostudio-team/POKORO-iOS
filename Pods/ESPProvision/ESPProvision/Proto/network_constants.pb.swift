// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: network_constants.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum WifiStationState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case connected // = 0
  case connecting // = 1
  case disconnected // = 2
  case connectionFailed // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .connected
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .connected
    case 1: self = .connecting
    case 2: self = .disconnected
    case 3: self = .connectionFailed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .connected: return 0
    case .connecting: return 1
    case .disconnected: return 2
    case .connectionFailed: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension WifiStationState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [WifiStationState] = [
    .connected,
    .connecting,
    .disconnected,
    .connectionFailed,
  ]
}

#endif  // swift(>=4.2)

enum WifiConnectFailedReason: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case authError // = 0
  case wifiNetworkNotFound // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .authError
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .authError
    case 1: self = .wifiNetworkNotFound
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .authError: return 0
    case .wifiNetworkNotFound: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension WifiConnectFailedReason: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [WifiConnectFailedReason] = [
    .authError,
    .wifiNetworkNotFound,
  ]
}

#endif  // swift(>=4.2)

public enum WifiAuthMode: SwiftProtobuf.Enum {
    public typealias RawValue = Int
  case `open` // = 0
  case wep // = 1
  case wpaPsk // = 2
  case wpa2Psk // = 3
  case wpaWpa2Psk // = 4
  case wpa2Enterprise // = 5
  case wpa3Psk // = 6
  case wpa2Wpa3Psk // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .open
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .open
    case 1: self = .wep
    case 2: self = .wpaPsk
    case 3: self = .wpa2Psk
    case 4: self = .wpaWpa2Psk
    case 5: self = .wpa2Enterprise
    case 6: self = .wpa3Psk
    case 7: self = .wpa2Wpa3Psk
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

    public var rawValue: Int {
    switch self {
    case .open: return 0
    case .wep: return 1
    case .wpaPsk: return 2
    case .wpa2Psk: return 3
    case .wpaWpa2Psk: return 4
    case .wpa2Enterprise: return 5
    case .wpa3Psk: return 6
    case .wpa2Wpa3Psk: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension WifiAuthMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [WifiAuthMode] = [
    .open,
    .wep,
    .wpaPsk,
    .wpa2Psk,
    .wpaWpa2Psk,
    .wpa2Enterprise,
    .wpa3Psk,
    .wpa2Wpa3Psk,
  ]
}

#endif  // swift(>=4.2)

enum ThreadNetworkState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case attached // = 0
  case attaching // = 1
  case dettached // = 2
  case attachingFailed // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .attached
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .attached
    case 1: self = .attaching
    case 2: self = .dettached
    case 3: self = .attachingFailed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .attached: return 0
    case .attaching: return 1
    case .dettached: return 2
    case .attachingFailed: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension ThreadNetworkState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [ThreadNetworkState] = [
    .attached,
    .attaching,
    .dettached,
    .attachingFailed,
  ]
}

#endif  // swift(>=4.2)

enum ThreadAttachFailedReason: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case datasetInvalid // = 0
  case threadNetworkNotFound // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .datasetInvalid
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .datasetInvalid
    case 1: self = .threadNetworkNotFound
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .datasetInvalid: return 0
    case .threadNetworkNotFound: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension ThreadAttachFailedReason: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [ThreadAttachFailedReason] = [
    .datasetInvalid,
    .threadNetworkNotFound,
  ]
}

#endif  // swift(>=4.2)

struct WifiConnectedState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ip4Addr: String = String()

  var authMode: WifiAuthMode = .open

  var ssid: Data = Data()

  var bssid: Data = Data()

  var channel: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ThreadAttachState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var panID: UInt32 = 0

  var extPanID: Data = Data()

  var channel: UInt32 = 0

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension WifiStationState: @unchecked Sendable {}
extension WifiConnectFailedReason: @unchecked Sendable {}
extension WifiAuthMode: @unchecked Sendable {}
extension ThreadNetworkState: @unchecked Sendable {}
extension ThreadAttachFailedReason: @unchecked Sendable {}
extension WifiConnectedState: @unchecked Sendable {}
extension ThreadAttachState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension WifiStationState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Connected"),
    1: .same(proto: "Connecting"),
    2: .same(proto: "Disconnected"),
    3: .same(proto: "ConnectionFailed"),
  ]
}

extension WifiConnectFailedReason: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AuthError"),
    1: .same(proto: "WifiNetworkNotFound"),
  ]
}

extension WifiAuthMode: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Open"),
    1: .same(proto: "WEP"),
    2: .same(proto: "WPA_PSK"),
    3: .same(proto: "WPA2_PSK"),
    4: .same(proto: "WPA_WPA2_PSK"),
    5: .same(proto: "WPA2_ENTERPRISE"),
    6: .same(proto: "WPA3_PSK"),
    7: .same(proto: "WPA2_WPA3_PSK"),
  ]
}

extension ThreadNetworkState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Attached"),
    1: .same(proto: "Attaching"),
    2: .same(proto: "Dettached"),
    3: .same(proto: "AttachingFailed"),
  ]
}

extension ThreadAttachFailedReason: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DatasetInvalid"),
    1: .same(proto: "ThreadNetworkNotFound"),
  ]
}

extension WifiConnectedState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "WifiConnectedState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ip4_addr"),
    2: .standard(proto: "auth_mode"),
    3: .same(proto: "ssid"),
    4: .same(proto: "bssid"),
    5: .same(proto: "channel"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ip4Addr) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.authMode) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.ssid) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.bssid) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.channel) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ip4Addr.isEmpty {
      try visitor.visitSingularStringField(value: self.ip4Addr, fieldNumber: 1)
    }
    if self.authMode != .open {
      try visitor.visitSingularEnumField(value: self.authMode, fieldNumber: 2)
    }
    if !self.ssid.isEmpty {
      try visitor.visitSingularBytesField(value: self.ssid, fieldNumber: 3)
    }
    if !self.bssid.isEmpty {
      try visitor.visitSingularBytesField(value: self.bssid, fieldNumber: 4)
    }
    if self.channel != 0 {
      try visitor.visitSingularInt32Field(value: self.channel, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: WifiConnectedState, rhs: WifiConnectedState) -> Bool {
    if lhs.ip4Addr != rhs.ip4Addr {return false}
    if lhs.authMode != rhs.authMode {return false}
    if lhs.ssid != rhs.ssid {return false}
    if lhs.bssid != rhs.bssid {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ThreadAttachState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ThreadAttachState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pan_id"),
    2: .standard(proto: "ext_pan_id"),
    3: .same(proto: "channel"),
    4: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.panID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.extPanID) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.channel) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.panID != 0 {
      try visitor.visitSingularUInt32Field(value: self.panID, fieldNumber: 1)
    }
    if !self.extPanID.isEmpty {
      try visitor.visitSingularBytesField(value: self.extPanID, fieldNumber: 2)
    }
    if self.channel != 0 {
      try visitor.visitSingularUInt32Field(value: self.channel, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ThreadAttachState, rhs: ThreadAttachState) -> Bool {
    if lhs.panID != rhs.panID {return false}
    if lhs.extPanID != rhs.extPanID {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
