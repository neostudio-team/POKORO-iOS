// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: network_scan.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum NetworkScanMsgType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case typeCmdScanWifiStart // = 0
  case typeRespScanWifiStart // = 1
  case typeCmdScanWifiStatus // = 2
  case typeRespScanWifiStatus // = 3
  case typeCmdScanWifiResult // = 4
  case typeRespScanWifiResult // = 5
  case typeCmdScanThreadStart // = 6
  case typeRespScanThreadStart // = 7
  case typeCmdScanThreadStatus // = 8
  case typeRespScanThreadStatus // = 9
  case typeCmdScanThreadResult // = 10
  case typeRespScanThreadResult // = 11
  case UNRECOGNIZED(Int)

  init() {
    self = .typeCmdScanWifiStart
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .typeCmdScanWifiStart
    case 1: self = .typeRespScanWifiStart
    case 2: self = .typeCmdScanWifiStatus
    case 3: self = .typeRespScanWifiStatus
    case 4: self = .typeCmdScanWifiResult
    case 5: self = .typeRespScanWifiResult
    case 6: self = .typeCmdScanThreadStart
    case 7: self = .typeRespScanThreadStart
    case 8: self = .typeCmdScanThreadStatus
    case 9: self = .typeRespScanThreadStatus
    case 10: self = .typeCmdScanThreadResult
    case 11: self = .typeRespScanThreadResult
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .typeCmdScanWifiStart: return 0
    case .typeRespScanWifiStart: return 1
    case .typeCmdScanWifiStatus: return 2
    case .typeRespScanWifiStatus: return 3
    case .typeCmdScanWifiResult: return 4
    case .typeRespScanWifiResult: return 5
    case .typeCmdScanThreadStart: return 6
    case .typeRespScanThreadStart: return 7
    case .typeCmdScanThreadStatus: return 8
    case .typeRespScanThreadStatus: return 9
    case .typeCmdScanThreadResult: return 10
    case .typeRespScanThreadResult: return 11
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension NetworkScanMsgType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [NetworkScanMsgType] = [
    .typeCmdScanWifiStart,
    .typeRespScanWifiStart,
    .typeCmdScanWifiStatus,
    .typeRespScanWifiStatus,
    .typeCmdScanWifiResult,
    .typeRespScanWifiResult,
    .typeCmdScanThreadStart,
    .typeRespScanThreadStart,
    .typeCmdScanThreadStatus,
    .typeRespScanThreadStatus,
    .typeCmdScanThreadResult,
    .typeRespScanThreadResult,
  ]
}

#endif  // swift(>=4.2)

struct CmdScanWifiStart {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var blocking: Bool = false

  var passive: Bool = false

  var groupChannels: UInt32 = 0

  var periodMs: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CmdScanThreadStart {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var blocking: Bool = false

  var channelMask: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RespScanWifiStart {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RespScanThreadStart {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CmdScanWifiStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CmdScanThreadStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RespScanWifiStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var scanFinished: Bool = false

  var resultCount: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RespScanThreadStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var scanFinished: Bool = false

  var resultCount: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CmdScanWifiResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var startIndex: UInt32 = 0

  var count: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CmdScanThreadResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var startIndex: UInt32 = 0

  var count: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct WiFiScanResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ssid: Data = Data()

  var channel: UInt32 = 0

  var rssi: Int32 = 0

  var bssid: Data = Data()

  var auth: WifiAuthMode = .open

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ThreadScanResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var panID: UInt32 = 0

  var channel: UInt32 = 0

  var rssi: Int32 = 0

  var lqi: UInt32 = 0

  var extAddr: Data = Data()

  var networkName: String = String()

  var extPanID: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RespScanWifiResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entries: [WiFiScanResult] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RespScanThreadResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entries: [ThreadScanResult] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct NetworkScanPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var msg: NetworkScanMsgType = .typeCmdScanWifiStart

  var status: Status = .success

  var payload: NetworkScanPayload.OneOf_Payload? = nil

  var cmdScanWifiStart: CmdScanWifiStart {
    get {
      if case .cmdScanWifiStart(let v)? = payload {return v}
      return CmdScanWifiStart()
    }
    set {payload = .cmdScanWifiStart(newValue)}
  }

  var respScanWifiStart: RespScanWifiStart {
    get {
      if case .respScanWifiStart(let v)? = payload {return v}
      return RespScanWifiStart()
    }
    set {payload = .respScanWifiStart(newValue)}
  }

  var cmdScanWifiStatus: CmdScanWifiStatus {
    get {
      if case .cmdScanWifiStatus(let v)? = payload {return v}
      return CmdScanWifiStatus()
    }
    set {payload = .cmdScanWifiStatus(newValue)}
  }

  var respScanWifiStatus: RespScanWifiStatus {
    get {
      if case .respScanWifiStatus(let v)? = payload {return v}
      return RespScanWifiStatus()
    }
    set {payload = .respScanWifiStatus(newValue)}
  }

  var cmdScanWifiResult: CmdScanWifiResult {
    get {
      if case .cmdScanWifiResult(let v)? = payload {return v}
      return CmdScanWifiResult()
    }
    set {payload = .cmdScanWifiResult(newValue)}
  }

  var respScanWifiResult: RespScanWifiResult {
    get {
      if case .respScanWifiResult(let v)? = payload {return v}
      return RespScanWifiResult()
    }
    set {payload = .respScanWifiResult(newValue)}
  }

  var cmdScanThreadStart: CmdScanThreadStart {
    get {
      if case .cmdScanThreadStart(let v)? = payload {return v}
      return CmdScanThreadStart()
    }
    set {payload = .cmdScanThreadStart(newValue)}
  }

  var respScanThreadStart: RespScanThreadStart {
    get {
      if case .respScanThreadStart(let v)? = payload {return v}
      return RespScanThreadStart()
    }
    set {payload = .respScanThreadStart(newValue)}
  }

  var cmdScanThreadStatus: CmdScanThreadStatus {
    get {
      if case .cmdScanThreadStatus(let v)? = payload {return v}
      return CmdScanThreadStatus()
    }
    set {payload = .cmdScanThreadStatus(newValue)}
  }

  var respScanThreadStatus: RespScanThreadStatus {
    get {
      if case .respScanThreadStatus(let v)? = payload {return v}
      return RespScanThreadStatus()
    }
    set {payload = .respScanThreadStatus(newValue)}
  }

  var cmdScanThreadResult: CmdScanThreadResult {
    get {
      if case .cmdScanThreadResult(let v)? = payload {return v}
      return CmdScanThreadResult()
    }
    set {payload = .cmdScanThreadResult(newValue)}
  }

  var respScanThreadResult: RespScanThreadResult {
    get {
      if case .respScanThreadResult(let v)? = payload {return v}
      return RespScanThreadResult()
    }
    set {payload = .respScanThreadResult(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable {
    case cmdScanWifiStart(CmdScanWifiStart)
    case respScanWifiStart(RespScanWifiStart)
    case cmdScanWifiStatus(CmdScanWifiStatus)
    case respScanWifiStatus(RespScanWifiStatus)
    case cmdScanWifiResult(CmdScanWifiResult)
    case respScanWifiResult(RespScanWifiResult)
    case cmdScanThreadStart(CmdScanThreadStart)
    case respScanThreadStart(RespScanThreadStart)
    case cmdScanThreadStatus(CmdScanThreadStatus)
    case respScanThreadStatus(RespScanThreadStatus)
    case cmdScanThreadResult(CmdScanThreadResult)
    case respScanThreadResult(RespScanThreadResult)

  #if !swift(>=4.1)
    static func ==(lhs: NetworkScanPayload.OneOf_Payload, rhs: NetworkScanPayload.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.cmdScanWifiStart, .cmdScanWifiStart): return {
        guard case .cmdScanWifiStart(let l) = lhs, case .cmdScanWifiStart(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.respScanWifiStart, .respScanWifiStart): return {
        guard case .respScanWifiStart(let l) = lhs, case .respScanWifiStart(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.cmdScanWifiStatus, .cmdScanWifiStatus): return {
        guard case .cmdScanWifiStatus(let l) = lhs, case .cmdScanWifiStatus(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.respScanWifiStatus, .respScanWifiStatus): return {
        guard case .respScanWifiStatus(let l) = lhs, case .respScanWifiStatus(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.cmdScanWifiResult, .cmdScanWifiResult): return {
        guard case .cmdScanWifiResult(let l) = lhs, case .cmdScanWifiResult(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.respScanWifiResult, .respScanWifiResult): return {
        guard case .respScanWifiResult(let l) = lhs, case .respScanWifiResult(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.cmdScanThreadStart, .cmdScanThreadStart): return {
        guard case .cmdScanThreadStart(let l) = lhs, case .cmdScanThreadStart(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.respScanThreadStart, .respScanThreadStart): return {
        guard case .respScanThreadStart(let l) = lhs, case .respScanThreadStart(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.cmdScanThreadStatus, .cmdScanThreadStatus): return {
        guard case .cmdScanThreadStatus(let l) = lhs, case .cmdScanThreadStatus(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.respScanThreadStatus, .respScanThreadStatus): return {
        guard case .respScanThreadStatus(let l) = lhs, case .respScanThreadStatus(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.cmdScanThreadResult, .cmdScanThreadResult): return {
        guard case .cmdScanThreadResult(let l) = lhs, case .cmdScanThreadResult(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.respScanThreadResult, .respScanThreadResult): return {
        guard case .respScanThreadResult(let l) = lhs, case .respScanThreadResult(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension NetworkScanMsgType: @unchecked Sendable {}
extension CmdScanWifiStart: @unchecked Sendable {}
extension CmdScanThreadStart: @unchecked Sendable {}
extension RespScanWifiStart: @unchecked Sendable {}
extension RespScanThreadStart: @unchecked Sendable {}
extension CmdScanWifiStatus: @unchecked Sendable {}
extension CmdScanThreadStatus: @unchecked Sendable {}
extension RespScanWifiStatus: @unchecked Sendable {}
extension RespScanThreadStatus: @unchecked Sendable {}
extension CmdScanWifiResult: @unchecked Sendable {}
extension CmdScanThreadResult: @unchecked Sendable {}
extension WiFiScanResult: @unchecked Sendable {}
extension ThreadScanResult: @unchecked Sendable {}
extension RespScanWifiResult: @unchecked Sendable {}
extension RespScanThreadResult: @unchecked Sendable {}
extension NetworkScanPayload: @unchecked Sendable {}
extension NetworkScanPayload.OneOf_Payload: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension NetworkScanMsgType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TypeCmdScanWifiStart"),
    1: .same(proto: "TypeRespScanWifiStart"),
    2: .same(proto: "TypeCmdScanWifiStatus"),
    3: .same(proto: "TypeRespScanWifiStatus"),
    4: .same(proto: "TypeCmdScanWifiResult"),
    5: .same(proto: "TypeRespScanWifiResult"),
    6: .same(proto: "TypeCmdScanThreadStart"),
    7: .same(proto: "TypeRespScanThreadStart"),
    8: .same(proto: "TypeCmdScanThreadStatus"),
    9: .same(proto: "TypeRespScanThreadStatus"),
    10: .same(proto: "TypeCmdScanThreadResult"),
    11: .same(proto: "TypeRespScanThreadResult"),
  ]
}

extension CmdScanWifiStart: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CmdScanWifiStart"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blocking"),
    2: .same(proto: "passive"),
    3: .standard(proto: "group_channels"),
    4: .standard(proto: "period_ms"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.blocking) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.passive) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.groupChannels) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.periodMs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blocking != false {
      try visitor.visitSingularBoolField(value: self.blocking, fieldNumber: 1)
    }
    if self.passive != false {
      try visitor.visitSingularBoolField(value: self.passive, fieldNumber: 2)
    }
    if self.groupChannels != 0 {
      try visitor.visitSingularUInt32Field(value: self.groupChannels, fieldNumber: 3)
    }
    if self.periodMs != 0 {
      try visitor.visitSingularUInt32Field(value: self.periodMs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CmdScanWifiStart, rhs: CmdScanWifiStart) -> Bool {
    if lhs.blocking != rhs.blocking {return false}
    if lhs.passive != rhs.passive {return false}
    if lhs.groupChannels != rhs.groupChannels {return false}
    if lhs.periodMs != rhs.periodMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CmdScanThreadStart: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CmdScanThreadStart"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blocking"),
    2: .standard(proto: "channel_mask"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.blocking) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.channelMask) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blocking != false {
      try visitor.visitSingularBoolField(value: self.blocking, fieldNumber: 1)
    }
    if self.channelMask != 0 {
      try visitor.visitSingularUInt32Field(value: self.channelMask, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CmdScanThreadStart, rhs: CmdScanThreadStart) -> Bool {
    if lhs.blocking != rhs.blocking {return false}
    if lhs.channelMask != rhs.channelMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RespScanWifiStart: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RespScanWifiStart"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RespScanWifiStart, rhs: RespScanWifiStart) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RespScanThreadStart: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RespScanThreadStart"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RespScanThreadStart, rhs: RespScanThreadStart) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CmdScanWifiStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CmdScanWifiStatus"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CmdScanWifiStatus, rhs: CmdScanWifiStatus) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CmdScanThreadStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CmdScanThreadStatus"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CmdScanThreadStatus, rhs: CmdScanThreadStatus) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RespScanWifiStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RespScanWifiStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "scan_finished"),
    2: .standard(proto: "result_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.scanFinished) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.resultCount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.scanFinished != false {
      try visitor.visitSingularBoolField(value: self.scanFinished, fieldNumber: 1)
    }
    if self.resultCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.resultCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RespScanWifiStatus, rhs: RespScanWifiStatus) -> Bool {
    if lhs.scanFinished != rhs.scanFinished {return false}
    if lhs.resultCount != rhs.resultCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RespScanThreadStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RespScanThreadStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "scan_finished"),
    2: .standard(proto: "result_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.scanFinished) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.resultCount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.scanFinished != false {
      try visitor.visitSingularBoolField(value: self.scanFinished, fieldNumber: 1)
    }
    if self.resultCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.resultCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RespScanThreadStatus, rhs: RespScanThreadStatus) -> Bool {
    if lhs.scanFinished != rhs.scanFinished {return false}
    if lhs.resultCount != rhs.resultCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CmdScanWifiResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CmdScanWifiResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_index"),
    2: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.startIndex) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.count) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.startIndex, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt32Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CmdScanWifiResult, rhs: CmdScanWifiResult) -> Bool {
    if lhs.startIndex != rhs.startIndex {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CmdScanThreadResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CmdScanThreadResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_index"),
    2: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.startIndex) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.count) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.startIndex, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt32Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CmdScanThreadResult, rhs: CmdScanThreadResult) -> Bool {
    if lhs.startIndex != rhs.startIndex {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension WiFiScanResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "WiFiScanResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ssid"),
    2: .same(proto: "channel"),
    3: .same(proto: "rssi"),
    4: .same(proto: "bssid"),
    5: .same(proto: "auth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.ssid) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.channel) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.rssi) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.bssid) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.auth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ssid.isEmpty {
      try visitor.visitSingularBytesField(value: self.ssid, fieldNumber: 1)
    }
    if self.channel != 0 {
      try visitor.visitSingularUInt32Field(value: self.channel, fieldNumber: 2)
    }
    if self.rssi != 0 {
      try visitor.visitSingularInt32Field(value: self.rssi, fieldNumber: 3)
    }
    if !self.bssid.isEmpty {
      try visitor.visitSingularBytesField(value: self.bssid, fieldNumber: 4)
    }
    if self.auth != .open {
      try visitor.visitSingularEnumField(value: self.auth, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: WiFiScanResult, rhs: WiFiScanResult) -> Bool {
    if lhs.ssid != rhs.ssid {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.rssi != rhs.rssi {return false}
    if lhs.bssid != rhs.bssid {return false}
    if lhs.auth != rhs.auth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ThreadScanResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ThreadScanResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pan_id"),
    2: .same(proto: "channel"),
    3: .same(proto: "rssi"),
    4: .same(proto: "lqi"),
    5: .standard(proto: "ext_addr"),
    6: .standard(proto: "network_name"),
    7: .standard(proto: "ext_pan_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.panID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.channel) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.rssi) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.lqi) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.extAddr) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.networkName) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.extPanID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.panID != 0 {
      try visitor.visitSingularUInt32Field(value: self.panID, fieldNumber: 1)
    }
    if self.channel != 0 {
      try visitor.visitSingularUInt32Field(value: self.channel, fieldNumber: 2)
    }
    if self.rssi != 0 {
      try visitor.visitSingularInt32Field(value: self.rssi, fieldNumber: 3)
    }
    if self.lqi != 0 {
      try visitor.visitSingularUInt32Field(value: self.lqi, fieldNumber: 4)
    }
    if !self.extAddr.isEmpty {
      try visitor.visitSingularBytesField(value: self.extAddr, fieldNumber: 5)
    }
    if !self.networkName.isEmpty {
      try visitor.visitSingularStringField(value: self.networkName, fieldNumber: 6)
    }
    if !self.extPanID.isEmpty {
      try visitor.visitSingularBytesField(value: self.extPanID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ThreadScanResult, rhs: ThreadScanResult) -> Bool {
    if lhs.panID != rhs.panID {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.rssi != rhs.rssi {return false}
    if lhs.lqi != rhs.lqi {return false}
    if lhs.extAddr != rhs.extAddr {return false}
    if lhs.networkName != rhs.networkName {return false}
    if lhs.extPanID != rhs.extPanID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RespScanWifiResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RespScanWifiResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RespScanWifiResult, rhs: RespScanWifiResult) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RespScanThreadResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RespScanThreadResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RespScanThreadResult, rhs: RespScanThreadResult) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension NetworkScanPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NetworkScanPayload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "msg"),
    2: .same(proto: "status"),
    10: .standard(proto: "cmd_scan_wifi_start"),
    11: .standard(proto: "resp_scan_wifi_start"),
    12: .standard(proto: "cmd_scan_wifi_status"),
    13: .standard(proto: "resp_scan_wifi_status"),
    14: .standard(proto: "cmd_scan_wifi_result"),
    15: .standard(proto: "resp_scan_wifi_result"),
    16: .standard(proto: "cmd_scan_thread_start"),
    17: .standard(proto: "resp_scan_thread_start"),
    18: .standard(proto: "cmd_scan_thread_status"),
    19: .standard(proto: "resp_scan_thread_status"),
    20: .standard(proto: "cmd_scan_thread_result"),
    21: .standard(proto: "resp_scan_thread_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.msg) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 10: try {
        var v: CmdScanWifiStart?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .cmdScanWifiStart(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .cmdScanWifiStart(v)
        }
      }()
      case 11: try {
        var v: RespScanWifiStart?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .respScanWifiStart(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .respScanWifiStart(v)
        }
      }()
      case 12: try {
        var v: CmdScanWifiStatus?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .cmdScanWifiStatus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .cmdScanWifiStatus(v)
        }
      }()
      case 13: try {
        var v: RespScanWifiStatus?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .respScanWifiStatus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .respScanWifiStatus(v)
        }
      }()
      case 14: try {
        var v: CmdScanWifiResult?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .cmdScanWifiResult(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .cmdScanWifiResult(v)
        }
      }()
      case 15: try {
        var v: RespScanWifiResult?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .respScanWifiResult(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .respScanWifiResult(v)
        }
      }()
      case 16: try {
        var v: CmdScanThreadStart?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .cmdScanThreadStart(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .cmdScanThreadStart(v)
        }
      }()
      case 17: try {
        var v: RespScanThreadStart?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .respScanThreadStart(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .respScanThreadStart(v)
        }
      }()
      case 18: try {
        var v: CmdScanThreadStatus?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .cmdScanThreadStatus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .cmdScanThreadStatus(v)
        }
      }()
      case 19: try {
        var v: RespScanThreadStatus?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .respScanThreadStatus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .respScanThreadStatus(v)
        }
      }()
      case 20: try {
        var v: CmdScanThreadResult?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .cmdScanThreadResult(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .cmdScanThreadResult(v)
        }
      }()
      case 21: try {
        var v: RespScanThreadResult?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .respScanThreadResult(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .respScanThreadResult(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.msg != .typeCmdScanWifiStart {
      try visitor.visitSingularEnumField(value: self.msg, fieldNumber: 1)
    }
    if self.status != .success {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    switch self.payload {
    case .cmdScanWifiStart?: try {
      guard case .cmdScanWifiStart(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .respScanWifiStart?: try {
      guard case .respScanWifiStart(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .cmdScanWifiStatus?: try {
      guard case .cmdScanWifiStatus(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .respScanWifiStatus?: try {
      guard case .respScanWifiStatus(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .cmdScanWifiResult?: try {
      guard case .cmdScanWifiResult(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .respScanWifiResult?: try {
      guard case .respScanWifiResult(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .cmdScanThreadStart?: try {
      guard case .cmdScanThreadStart(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .respScanThreadStart?: try {
      guard case .respScanThreadStart(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case .cmdScanThreadStatus?: try {
      guard case .cmdScanThreadStatus(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
    }()
    case .respScanThreadStatus?: try {
      guard case .respScanThreadStatus(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    }()
    case .cmdScanThreadResult?: try {
      guard case .cmdScanThreadResult(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    }()
    case .respScanThreadResult?: try {
      guard case .respScanThreadResult(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: NetworkScanPayload, rhs: NetworkScanPayload) -> Bool {
    if lhs.msg != rhs.msg {return false}
    if lhs.status != rhs.status {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
